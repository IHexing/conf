# Shadowrocket 完整配置文件模板
# 包含所有配置段及详细注释
# 更新时间：2025-08-26

# ================================================
# [General] 全局通用设置
# 控制Shadowrocket的核心行为和系统级配置
# ================================================
[General]
# 系统代理绕过：true=绕过系统流量，避免影响系统更新等
bypass-system = true

# 跳过代理的地址：本地网络、私有IP、苹果服务等不经过代理
skip-proxy = 192.168.0.0/16, 10.0.0.0/8, 172.16.0.0/12, localhost, *.local, captive.apple.com

# TUN模式排除路由：这些网段不走TUN模式，保持直连
# 主要是私有网络、组播地址等
# 10.0.0.0/8: A类私有网络
# 100.64.0.0/10: 运营商级NAT
# 127.0.0.0/8: 本地回环
# 169.254.0.0/16: 链路本地地址
# 172.16.0.0/12: B类私有网络
# 192.168.0.0/16: C类私有网络
tun-excluded-routes = 10.0.0.0/8, 100.64.0.0/10, 127.0.0.0/8, 169.254.0.0/16, 172.16.0.0/12, 192.0.0.0/24, 192.0.2.0/24, 192.88.99.0/24, 192.168.0.0/16, 198.51.100.0/24, 203.0.113.0/24, 224.0.0.0/4, 255.255.255.255/32, 239.255.255.250/32

# DNS服务器配置：按优先级排序
# 119.29.29.29: 腾讯DNSPod
# 114.114.114.114: 114DNS
# 223.5.5.5: 阿里DNS
# system: 系统默认DNS
dns-server = 119.29.29.29, 114.114.114.114, 223.5.5.5, system

# 备用DNS服务器：主DNS失效时使用
fallback-dns-server = system

# IPv6支持：false=禁用IPv6，避免IPv6泄露
ipv6 = false

# IPv6优先：false=优先使用IPv4
prefer-ipv6 = false

# DNS回退系统：false=不使用系统DNS作为回退
dns-fallback-system = false

# DNS直连系统：false=不直接使用系统DNS解析
dns-direct-system = false

# ICMP自动回复：true=自动回复ICMP请求，提高兼容性
icmp-auto-reply = true

# 拒绝URL重写：false=允许URL重写规则
always-reject-url-rewrite = false

# 私有IP响应：true=允许返回私有IP地址
private-ip-answer = true

# DNS直连回退代理：true=DNS解析失败时使用代理
dns-direct-fallback-proxy = true

# ================================================
# [Proxy] 代理服务器配置
# 定义可用的代理节点，支持多种协议
# ================================================
[Proxy]
# 格式：节点名称 = 协议类型, 服务器地址, 端口, 加密方式, 密码, 其他参数
# Shadowsocks示例
# 🇺🇸 US-洛杉矶 = ss, us-la.example.com, 443, aes-256-gcm, "password123", fast-open=true, udp-relay=true

# VMess示例
# 🇭🇰 HK-香港 = vmess, hk.example.com, 443, aes-128-gcm, uuid-here, alterId=0, tls=true, skip-cert-verify=true

# Trojan示例
# 🇯🇵 JP-东京 = trojan, jp-tokyo.example.com, 443, password456, tls=true, skip-cert-verify=true

# 直连选项（必须包含）
DIRECT = direct

# ================================================
# [Proxy Group] 代理分组策略
# 定义如何组织和选择代理节点
# ================================================
[Proxy Group]
# 策略类型说明：
# select: 手动选择，用户界面下拉选择
# url-test: 自动测速，选择延迟最低的节点
# fallback: 故障转移，主节点失效时切换
# load-balance: 负载均衡，流量分发到多个节点

# 主策略选择：所有流量的入口
🚀 策略选择 = select, ♻️ 延迟优选, 🇭🇰 香港节点, 🇨🇳 台湾节点, 🇯🇵 日本节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇰🇷 韩国节点, DIRECT

# 延迟优选：自动选择延迟最低的可用节点
♻️ 延迟优选 = url-test, 🇭🇰 香港节点, 🇨🇳 台湾节点, 🇯🇵 日本节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇰🇷 韩国节点, url=http://www.gstatic.com/generate_204, interval=600, tolerance=100, timeout=5

# AI服务分组：ChatGPT、Claude等
🤖 人工智能 = select, 🇺🇸 美国节点, 🇯🇵 日本节点, 🇸🇬 新加坡节点, 🇰🇷 韩国节点, 🚀 策略选择

# 流媒体分组
📹 YouTube = select, 🇺🇸 美国节点, 🇭🇰 香港节点, 🇸🇬 新加坡节点, 🇯🇵 日本节点, 🚀 策略选择
🎥 Netflix = select, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇭🇰 香港节点, 🇯🇵 日本节点, 🚀 策略选择
🎬 Disney+ = select, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🚀 策略选择
📺 哔哩哔哩 = select, DIRECT, 🇭🇰 香港节点, 🇨🇳 台湾节点

# 社交媒体分组
📱 社交媒体 = select, 🚀 策略选择, 🇭🇰 香港节点, 🇺🇸 美国节点, 🇯🇵 日本节点
📲 Telegram = select, 🚀 策略选择, 🇭🇰 香港节点, 🇺🇸 美国节点, 🇸🇬 新加坡节点
🐦 Twitter = select, 🚀 策略选择, 🇺🇸 美国节点, 🇭🇰 香港节点
👤 Facebook = select, 🚀 策略选择, 🇺🇸 美国节点, 🇭🇰 香港节点

# 游戏分组
🎮 游戏平台 = select, 🚀 策略选择, 🇯🇵 日本节点, 🇺🇸 美国节点, 🇰🇷 韩国节点, DIRECT

# 微软服务分组
Ⓜ️ 微软服务 = select, DIRECT, 🚀 策略选择, 🇺🇸 美国节点, 🇭🇰 香港节点

# 苹果服务分组
🍎 苹果服务 = select, DIRECT, 🚀 策略选择, 🇺🇸 美国节点

# 地区节点分组（正则匹配节点名称）
🇭🇰 香港节点 = url-test, url=http://www.gstatic.com/generate_204, interval=600, tolerance=0, timeout=5, policy-regex-filter=(港|HK|(?i)Hong)
🇨🇳 台湾节点 = url-test, url=http://www.gstatic.com/generate_204, interval=600, tolerance=0, timeout=5, policy-regex-filter=(台|TW|(?i)Taiwan)
🇯🇵 日本节点 = url-test, url=http://www.gstatic.com/generate_204, interval=600, tolerance=0, timeout=5, policy-regex-filter=(日本|JP|(?i)Japan)
🇸🇬 新加坡节点 = url-test, url=http://www.gstatic.com/generate_204, interval=600, tolerance=0, timeout=5, policy-regex-filter=(新加坡|狮城|SG|(?i)Singapore)
🇺🇸 美国节点 = url-test, url=http://www.gstatic.com/generate_204, interval=600, tolerance=0, timeout=5, policy-regex-filter=(美国|US|(?i)States|American)
🇰🇷 韩国节点 = url-test, url=http://www.gstatic.com/generate_204, interval=600, tolerance=0, timeout=5, policy-regex-filter=(韩国|KR|(?i)Korea)

# ================================================
# [Rule] 分流规则
# 定义哪些流量走哪个代理分组
# 优先级从上到下匹配
# ================================================
[Rule]
# 广告拦截：直接拒绝
DOMAIN-KEYWORD,adservice,REJECT
DOMAIN-KEYWORD,googleads,REJECT
DOMAIN-KEYWORD,doubleclick,REJECT

# AI服务
DOMAIN-KEYWORD,openai,🤖 人工智能
DOMAIN-KEYWORD,chatgpt,🤖 人工智能
DOMAIN-KEYWORD,claude,🤖 人工智能
DOMAIN-SUFFIX,ai.com,🤖 人工智能

# 流媒体平台
RULE-SET,https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/Netflix.list,🎥 Netflix
RULE-SET,https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/YouTube.list,📹 YouTube
RULE-SET,https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/Disney.list,🎬 Disney+
RULE-SET,https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/Bilibili.list,📺 哔哩哔哩

# 社交媒体
RULE-SET,https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/Twitter.list,🐦 Twitter
RULE-SET,https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/Facebook.list,👤 Facebook
RULE-SET,https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/Instagram.list,📱 社交媒体
RULE-SET,https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Telegram.list,📲 Telegram

# 游戏平台
RULE-SET,https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/Steam.list,🎮 游戏平台
RULE-SET,https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/Epic.list,🎮 游戏平台
DOMAIN-KEYWORD,steam,🎮 游戏平台
DOMAIN-KEYWORD,epicgames,🎮 游戏平台

# 微软服务
RULE-SET,https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Microsoft.list,Ⓜ️ 微软服务
DOMAIN-SUFFIX,microsoft.com,Ⓜ️ 微软服务
DOMAIN-SUFFIX,office.com,Ⓜ️ 微软服务

# 苹果服务
RULE-SET,https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Apple.list,🍎 苹果服务
DOMAIN-SUFFIX,apple.com,🍎 苹果服务
DOMAIN-SUFFIX,icloud.com,🍎 苹果服务

# 国内直连：中国IP和域名
RULE-SET,https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaDomain.list,DIRECT
RULE-SET,https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaCompanyIp.list,DIRECT
RULE-SET,https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaIp.list,DIRECT

# 局域网地址直连
RULE-SET,https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/LocalAreaNetwork.list,DIRECT

# 地理位置：中国IP直连
GEOIP,CN,DIRECT

# 最终规则：所有未匹配的流量
FINAL,🚀 策略选择

# ================================================
# [Host] 本地DNS映射
# 自定义域名解析，类似hosts文件
# ================================================
[Host]
# 本地开发环境
localhost = 127.0.0.1
# 自定义映射示例
# example.com = 1.2.3.4
# test.local = 192.168.1.100

# ================================================
# [URL Rewrite] URL重写规则
# 修改请求的URL，支持重定向和修改
# ================================================
[URL Rewrite]
# Google.cn重定向到Google.com
^https?://(www.)?g.cn https://www.google.com 302
^https?://(www.)?google.cn https://www.google.com 302

# 移除跟踪参数示例
# ^https?://(.*)/\?utm_.* https://$1 302

# ================================================
# [Header Rewrite] HTTP头重写
# 修改请求和响应的HTTP头信息
# ================================================
[Header Rewrite]
# 移除User-Agent中的跟踪信息
# ^https?://.* User-Agent .* Safari/.* Safari

# 添加安全头
# ^https?://.* response-header ^ Set-Cookie .* HttpOnly; Secure

# ================================================
# [MITM] 中间人攻击配置
# HTTPS解密配置，用于HTTPS流量分析
# ================================================
[MITM]
# 启用HTTPS解密
# enable = true

# 需要解密的域名列表
# hostname = *.googlevideo.com, *.facebook.com, *.twitter.com

# 证书配置（需要安装根证书）
# ca-passphrase = your-passphrase
# ca-p12 = base64-encoded-p12-certificate

# ================================================
# [Script] 自定义脚本
# JavaScript脚本，实现高级功能
# ================================================
[Script]
# 脚本格式：脚本名称 = 类型, 脚本路径, 参数
# 网络请求脚本示例
# http-request ^https?://api\.example\.com/.* script-path=example-request.js, timeout=10

# 网络响应脚本示例
# http-response ^https?://api\.example\.com/.* script-path=example-response.js, requires-body=true

# 定时任务脚本示例
# cron "0 9 * * *" script-path=daily-task.js

# ================================================
# 使用说明：
# 1. 将[Proxy]部分的示例替换为你的实际节点信息
# 2. 根据需要在[Rule]部分添加自定义规则
# 3. 如需HTTPS解密，配置[MITM]并安装证书
# 4. 高级用户可添加自定义脚本到[Script]
# =================================###############